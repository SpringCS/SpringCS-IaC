AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys the core network infrastructure and conectivity resources to be
  used for a Springfield Car Share Solution.
  
Parameters:

#GlobalVPC-CIDR
  VpcNetworkParam:
    Type: String
    Description: VPC CIDR. For more info, see http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

# Public Subnets
  PublicSubNetAZ1Block:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  PublicSubNetAZ2Block:
    Type: String
    Description: Subnet CIDR for second Availability Zone
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

# Private Subnets
  ProcessSubNetAZ1Block:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  ProcessSubNetAZ2Block:
    Type: String
    Description: Subnet CIDR for second Availability Zone (e.g. us-west-2b, us-east-1c)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.
  
  # Data Subnets
  DataSubNetAZ1Block:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.

  DataSubNetAZ2Block:
    Type: String
    Description: Subnet CIDR for second Availability Zone (e.g. us-west-2b, us-east-1c)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges defined in RFC 1918.
  #VPCTag:
  #  Type: String
  #  Description: Tags para la VPC
    
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcNetworkParam
      Tags:
        - Key: Name
          Value: SpringCS2
      
  PublicSubNetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubNetAZ1Block
      MapPublicIpOnLaunch: true

  PublicSubNetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubNetAZ2Block
      MapPublicIpOnLaunch: true

  ProcessSubNetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref ProcessSubNetAZ1Block

  ProcessSubNetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref ProcessSubNetAZ2Block
 
  DataSubNetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref DataSubNetAZ1Block

  DataSubNetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !Ref DataSubNetAZ2Block
 
  AWSInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  
  GatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref AWSInternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSInternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubNetAZ1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubNetAZ2
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOne:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubNetAZ1

  NatGatewayTwo:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubNetAZ2
      
  NatGatewayOneAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  NatGatewayTwoAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  ProcessRouteTableOne:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  ProcessRouteOne:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref ProcessRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne

  ProcessRouteTableOneAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ProcessRouteTableOne
      SubnetId: !Ref ProcessSubNetAZ1

  ProcessRouteTableTwo:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  ProcessRouteTwo:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref ProcessRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo

  ProcessRouteTableTwoAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ProcessRouteTableTwo
      SubnetId: !Ref ProcessSubNetAZ2

  PublicSecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Servicios Habilitados para Public Layer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicSecgroup

  ProcessSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Servicios Habilitados para Process Layer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt PublicSecgroup.GroupId
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !GetAtt PublicSecgroup.GroupId
#      - IpProtocol: tcp
#        FromPort: 3306
#        ToPort: 3306
#        SourceSecurityGroupID: !Ref DataDBSecGroup
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 10.0.1.0/24
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 10.0.10.0/24  
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ProcessSecGroup

  DataDBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Servicios Habilitados para DataBase Layer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt ProcessSecGroup.GroupId
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 10.0.2.0/24
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 10.0.20.0/24
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DataDBSecGroup

  SpringCSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SpringCSALB
      Subnets: 
        - !Ref PublicSubNetAZ1
        - !Ref PublicSubNetAZ2
      SecurityGroups:
        - !Ref PublicSecgroup
      Tags:
        - Key: Name
          Value: SpringCSALB
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SpringCSALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward

  


Outputs:
  CurrentRegion:
    Description: Region
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentRegion
  CurrentAccount:
    Description: AccountID
    Value: !Ref 'AWS::AccountId'
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentAccount
  VPCId:
    Description: VpcId
    Value: !Ref VPC
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - VPCId
  PublicSubNetAZ1:
    Description: PublicSubNetAZ1
    Value: !Ref PublicSubNetAZ1
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubNetAZ1
  PublicSubNetAZ2:
    Description: PublicSubNetAZ2
    Value: !Ref PublicSubNetAZ2
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubNetAZ2
  ProcessSubNetAZ1:
    Description: ProcessSubNetAZ1
    Value: !Ref ProcessSubNetAZ1
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - ProcessSubNetAZ1
  ProcessSubNetAZ2:
    Description: ProcessSubNetAZ2
    Value: !Ref ProcessSubNetAZ2
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - ProcessSubNetAZ2

  DataSubNetAZ1:
    Description: DataSubNetAZ1
    Value: !Ref DataSubNetAZ1
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - DataSubNetAZ1
  DataSubNetAZ2:
    Description: DataSubNetAZ2
    Value: !Ref DataSubNetAZ2
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - DataSubNetAZ2
          
  PublicSecgroup:
    Description: Security Group to public access 
    Value: !Ref PublicSecgroup
    Export:
      Name: !Sub ${AWS::StackName}-PublicSecgroup
  
  ProcessSecGroup:
    Description: Security Group to Process access 
    Value: !Ref ProcessSecGroup
    Export:
      Name: !Sub ${AWS::StackName}-ProcessSecGroup
      
  DataDBSecGroup:
    Description: Security Group to Database access 
    Value: !Ref DataDBSecGroup
    Export:
      Name: !Sub ${AWS::StackName}-DataDBSecGroup